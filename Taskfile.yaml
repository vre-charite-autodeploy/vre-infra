---
version: 3
vars:
  HOME_DIR:
    sh: echo ${HOME}
  CLUSTER_NAME: vre-vanilla
  PATH_KIND_CONFIG: tests/kind-cluster.yaml
  PATH_KUBE_CONFIG: "{{ .HOME_DIR }}/.kube/kind-{{ .CLUSTER_NAME }}"
dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' |  grep -v '^do$' | gum choose)
        task ${task}

  create-destroy-kind-cluster:
    desc: Create, Start & Configure kind cluster
    cmds:
      - |
        if kind get clusters | grep -wq "{{ .CLUSTER_NAME }}"; then

          # DELETE EXISTING CLUSTER
          gum confirm "Do you want to destroy existing cluster {{ .CLUSTER_NAME }} and rebuild it?" || exit 0
          echo "Cluster '{{ .CLUSTER_NAME }}' exists (already). Deleting it..."
          kind delete clusters "{{ .CLUSTER_NAME }}"
        fi

          # CREATE NEW CLUSTER
          kind create cluster --config {{ .PATH_KIND_CONFIG }} --name {{ .CLUSTER_NAME }} --kubeconfig {{ .PATH_KUBE_CONFIG }}
          kubectl get nodes --kubeconfig ~/.kube/kind-{{ .CLUSTER_NAME }}

  output-ingress-nipio:
    desc: Output ingress domain
    env:
      KUBECONFIG: "{{ .PATH_KUBE_CONFIG }}"
    cmds:
      - |
        echo *.$(kubectl get nodes -o json | jq -r '.items[] | select(.metadata.labels."ingress-ready" == "true") | .status.addresses[] | select(.type == "InternalIP") | .address').nip.io

  execute-terraform-operation:
    desc: Execute terraform operation
    vars:
      TF_OPERATION:
        sh: gum choose "apply" "plan" "destroy"
      TF_CODE_PATH: "{{ .USER_WORKING_DIR }}/../vre-infra/terraform"
      TF_VARS_FILE: "{{ .TF_CODE_PATH }}/config/charite/charite.tfvars"
      SELECTED_TF_MODULE:
        sh: |
          find {{ .TF_CODE_PATH }} -maxdepth 1 -type d ! -name "." | sed '1d;s|.*/||' | gum choose
    cmds:
      - |
        terraform -chdir={{ .TF_CODE_PATH }}/{{ .SELECTED_TF_MODULE }} init
        terraform -chdir={{ .TF_CODE_PATH }}/{{ .SELECTED_TF_MODULE }} {{ .TF_OPERATION }} -var-file="{{ .TF_VARS_FILE }}" --auto-approve
    env:
      TF_VAR_ghcr_token: "{{ .GCHR_CREDS }}"
      TF_VAR_vault_token: "whatever"
      TF_VAR_kubeconfig: "{{ .PATH_KUBE_CONFIG }}"
